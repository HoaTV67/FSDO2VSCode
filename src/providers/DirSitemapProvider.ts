import * as vscode from 'vscode';
import * as path from 'path';
import { getSectionContent, findLineContaining } from '../utils/xmlParser';

// Class ch√≠nh cung c·∫•p d·ªØ li·ªáu cho TreeView (sitemap cho file XML)
export class DirSitemapProvider implements vscode.TreeDataProvider<XmlNode> {
  // Event ƒë·ªÉ th√¥ng b√°o khi tree data thay ƒë·ªïi
  private _onDidChangeTreeData = new vscode.EventEmitter<XmlNode | undefined | void>();
  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;

  // G·ªçi h√†m n√†y ƒë·ªÉ refresh l·∫°i TreeView
  refresh(): void {
    this._onDidChangeTreeData.fire();
  }

  // Tr·∫£ v·ªÅ TreeItem cho t·ª´ng node (XmlNode)
  getTreeItem(element: XmlNode): vscode.TreeItem {
    return element;
  }

  // L·∫•y c√°c node con c·ªßa m·ªôt node (ho·∫∑c section g·ªëc n·∫øu element l√† undefined)
  async getChildren(element?: XmlNode): Promise<XmlNode[]> {
    const editor = vscode.window.activeTextEditor;
    if (!editor || !editor.document || !editor.document.fileName.endsWith('.xml')) return [];

    const text = editor.document.getText();              // To√†n b·ªô n·ªôi dung file XML
    const lines = text.split('\n');                      // M·ªói d√≤ng ƒë·ªÉ ti·ªán x·ª≠ l√Ω d√≤ng
    const basePath = path.dirname(editor.document.fileName); // Th∆∞ m·ª•c ch·ª©a file XML

    // H√†m n·ªôi b·ªô: t√¨m d√≤ng c·ªßa 1 ph·∫ßn t·ª≠ (field, action, function...) theo t√™n
    const resolveLineFromEntity = async (name: string, tag: string, filePattern: string) => {
      let line = findLineContaining(lines, tag, name); // T√¨m trong ch√≠nh file XML
      if (line > 0) return line;

      // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c, th·ª≠ t√¨m trong c√°c file entity b√™n ngo√†i (d·∫°ng SYSTEM)
      const entityRegex = /<!ENTITY\s+(\w+)\s+SYSTEM\s+"([^"]+)">/g;
      let match;
      while ((match = entityRegex.exec(text))) {
        const [_, entityName, relPath] = match;
        const absPath = path.resolve(basePath, relPath); // ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß t·ªõi file entity
        try {
          const content = await vscode.workspace.fs.readFile(vscode.Uri.file(absPath));
          const str = Buffer.from(content).toString('utf8');
          // Ki·ªÉm tra xem t√™n c·∫ßn t√¨m c√≥ xu·∫•t hi·ªán trong file n√†y kh√¥ng
          if (new RegExp(filePattern.replace('{name}', name)).test(str)) {
            return findLineContaining(lines, `&${entityName};`) || 0;
          }
        } catch {} // N·∫øu ƒë·ªçc file l·ªói th√¨ b·ªè qua
      }
      return 0;
    };

    // H√†m t·∫°o node t·ª´ regex ‚Üí th∆∞·ªùng d√πng cho field, action, command...
    const createNodesFromRegex = async (
      regex: RegExp,
      sectionContent: string,
      tag: string,
      filePattern: string,
      icon = 'üîπ'
    ) => {
      const items: XmlNode[] = [];
      let match;
      while ((match = regex.exec(sectionContent))) {
        const name = match[1]; // T√™n ph·∫ßn t·ª≠ t√¨m ƒë∆∞·ª£c t·ª´ regex
        const line = await resolveLineFromEntity(name, tag, filePattern); // T√¨m d√≤ng t∆∞∆°ng ·ª©ng
        items.push(new XmlNode(`${icon} ${name}`, 'leaf', line)); // T·∫°o node con
      }
      return items;
    };

    // N·∫øu ƒëang duy·ªát v√†o trong 1 section (v√≠ d·ª•: <fields>)
    if (element?.type === 'section') {
      const section = getSectionContent(text, element.label, basePath); // L·∫•y n·ªôi dung section
      const map: Record<string, () => Promise<XmlNode[]>> = {
        '<fields>': () =>
          createNodesFromRegex(/<field\s+name\s*=\s*"([^"]+)"/g, section, '<field', '<field\\s+name\\s*=\\s*"{name}"'),
        '<views>': () =>
          createNodesFromRegex(/<field\s+name\s*=\s*"([^"]+)"/g, section, '<field', '<field\\s+name\\s*=\\s*"{name}"'),
        '<commands>': () =>
          createNodesFromRegex(/<command\s+event\s*=\s*"([^"]+)"/g, section, '<command', '<command\\s+event\\s*=\\s*"{name}"'),
        '<response>': () =>
          createNodesFromRegex(/<action\s+id\s*=\s*"([^"]+)"/g, section, '<action', '<action\\s+id\\s*=\\s*"{name}"'),
        '<script>': async () => {
          const regex = /function\s+([^\s(]+)\s*\(/g; // T√¨m function
          const items: XmlNode[] = [];
          let match;
          while ((match = regex.exec(section))) {
            const rawName = match[1];
            const line = await resolveLineFromEntity(rawName, 'function', 'function\\s+{name}\\s*\\(');
            // Icon ƒë·∫∑c bi·ªát cho ExecuteCommand, ResponseComplete
            const icon = rawName.includes('ExecuteCommand') || rawName.includes('ResponseComplete') ? '‚≠ê' : 'üîπ';
            items.push(new XmlNode(`${icon} ${rawName}`, 'leaf', line));
          }
          return items;
        }
      };
      return map[element.label]?.() || [];
    }

    // N·∫øu ƒëang ·ªü root (ch∆∞a ch·ªçn section n√†o), li·ªát k√™ c√°c section c√≥ t·ªìn t·∫°i trong file
    const sectionNames = ['<fields>', '<views>', '<commands>', '<script>', '<response>'];
    const nodes: XmlNode[] = [];

    for (const section of sectionNames) {
      const content = getSectionContent(text, section, basePath);
      if (content && content.trim().length > 0) {
        const cleanTag = section.replace(/[<>]/g, '');                      // B·ªè <> ƒë·ªÉ t√¨m ch√≠nh x√°c t√™n th·∫ª
        const tagRegex = new RegExp(`<${cleanTag}(\s|>)`, 'i');            // Regex ƒë·ªÉ t√¨m ƒë√∫ng d√≤ng m·ªü th·∫ª
        const line = lines.findIndex((line) => tagRegex.test(line));       // T√¨m d√≤ng khai b√°o section
        nodes.push(new XmlNode(section, 'section', line));                 // G√°n lu√¥n line cho section ƒë·ªÉ h·ªó tr·ª£ double-click
      }
    }

    return nodes;
  }
}

// Class ƒë·∫°i di·ªán cho t·ª´ng node trong c√¢y (section ho·∫∑c leaf)
class XmlNode extends vscode.TreeItem {
  constructor(
    public readonly label: string,             // T√™n hi·ªÉn th·ªã
    public readonly type: 'section' | 'leaf',  // section (g·ªìm nhi·ªÅu con), leaf (d√≤ng ƒë∆°n)
    public readonly line?: number              // D√≤ng ƒë·ªÉ focus n·∫øu click v√†o
  ) {
    super(
      label,
      type === 'section'
        ? vscode.TreeItemCollapsibleState.Collapsed // Section c√≥ th·ªÉ expand/collapse
        : vscode.TreeItemCollapsibleState.None      // Leaf l√† node cu·ªëi
    );

    // N·∫øu c√≥ d√≤ng th√¨ c·∫•u h√¨nh command ‚Üí nh·∫£y ƒë·∫øn d√≤ng t∆∞∆°ng ·ª©ng:
    // - N·∫øu l√† leaf: click ho·∫∑c double-click ƒë·ªÅu nh·∫£y
    // - N·∫øu l√† section: double-click ƒë·ªÉ nh·∫£y ƒë·∫øn th·∫ª <fields>, <views>, ...
    this.command =
      typeof line === 'number'
        ? {
            title: 'Go to line',
            command: 'xmlSitemap.revealPosition',  // L·ªánh ƒë√£ ƒëƒÉng k√Ω trong extension.ts
            arguments: [line]
          }
        : undefined;
  }
}
