// Import c√°c module c·∫ßn thi·∫øt
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import { findLineContaining } from '../utils/xmlParser';

// Class cung c·∫•p d·ªØ li·ªáu sitemap cho file message.xml
export class MessageSitemapProvider implements vscode.TreeDataProvider<XmlNode> {
  // Khai b√°o s·ª± ki·ªán thay ƒë·ªïi d·ªØ li·ªáu trong c√¢y
  private _onDidChangeTreeData = new vscode.EventEmitter<XmlNode | undefined | void>();
  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;

  // G·ªçi khi c·∫ßn l√†m m·ªõi c√¢y sitemap (v√≠ d·ª• khi chuy·ªÉn file)
  refresh(): void {
    this._onDidChangeTreeData.fire();
  }

  // Tr·∫£ v·ªÅ node (TreeItem) cho 1 ph·∫ßn t·ª≠ trong c√¢y
  getTreeItem(element: XmlNode): vscode.TreeItem {
    return element;
  }

  // L·∫•y c√°c node con trong c√¢y (t√πy theo context l√† root hay trong section <action>)
  async getChildren(element?: XmlNode): Promise<XmlNode[]> {
    const editor = vscode.window.activeTextEditor;

    // Ch·ªâ x·ª≠ l√Ω n·∫øu file ƒëang m·ªü l√† message.xml
    if (!editor || !editor.document || !editor.document.fileName.toLowerCase().endsWith('message.xml')) return [];

    const text = editor.document.getText();                   // L·∫•y to√†n b·ªô n·ªôi dung file XML
    const lines = text.split('\n');                           // T√°ch ra t·ª´ng d√≤ng ƒë·ªÉ t√¨m d√≤ng s·ªë
    const basePath = path.dirname(editor.document.fileName);  // L·∫•y th∆∞ m·ª•c ch·ª©a file ƒëang m·ªü

    // T√¨m t·∫•t c·∫£ c√°c khai b√°o entity b√™n ngo√†i file ch√≠nh
    const entityRegex = /<!ENTITY\s+(\w+)\s+SYSTEM\s+"([^"]+)">/g;
    const entityMap: Record<string, string> = {};             // Map t√™n entity => n·ªôi dung file
    let match;

    // ƒê·ªçc n·ªôi dung c·ªßa t·ª´ng file ƒë∆∞·ª£c khai b√°o trong entity
    while ((match = entityRegex.exec(text))) {
      const [, name, relPath] = match;
      try {
        const absPath = path.resolve(basePath, relPath);      // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file
        const content = fs.readFileSync(absPath, 'utf-8');    // ƒê·ªçc n·ªôi dung file
        entityMap[name] = content;
      } catch {
        entityMap[name] = ''; // N·∫øu l·ªói ƒë·ªçc file th√¨ g√°n r·ªóng
      }
    }

    // Thay th·∫ø t·∫•t c·∫£ entity (d·∫°ng &entity;) trong text g·ªëc th√†nh n·ªôi dung th·ª±c
    let xmlText = text;
    for (let i = 0; i < 5; i++) { // Thay t·ªëi ƒëa 5 v√≤ng ƒë·ªÉ x·ª≠ l√Ω entity l·ªìng nhau
      const newText = xmlText.replace(/&(\w+);/g, (_, name) => entityMap[name] || '');
      if (newText === xmlText) break; // D·ª´ng n·∫øu kh√¥ng c√≤n g√¨ ƒë·ªÉ thay n·ªØa
      xmlText = newText;
    }

    // N·∫øu ch∆∞a truy·ªÅn v√†o node n√†o ‚Üí ƒëang ·ªü g·ªëc ‚Üí tr·∫£ v·ªÅ node section <action>
    if (!element) {
      return [new XmlNode('<action>', 'section')];
    }

    // N·∫øu ƒëang m·ªü section <action> ‚Üí t√¨m c√°c th·∫ª <action id="..."> b√™n trong template
    if (element.label === '<action>') {
      const templateMatch = /<template[^>]*>([\s\S]*?)<\/template>/.exec(xmlText); // L·∫•y n·ªôi dung trong <template>...</template>
      if (!templateMatch) return [];

      const templateContent = templateMatch[1]; // Ph·∫ßn n·ªôi dung b√™n trong template
      const actionRegex = /<action\s+id="([^"]+)"/g; // Regex t√¨m th·∫ª <action id="...">
      const items: XmlNode[] = [];

      // V·ªõi m·ªói action t√¨m ƒë∆∞·ª£c ‚Üí t·∫°o node leaf v√† x√°c ƒë·ªãnh d√≤ng
      while ((match = actionRegex.exec(templateContent))) {
        const id = match[1];
        const line = findLineContaining(lines, `id="${id}"`); // T√¨m d√≤ng ch·ª©a action n√†y
        items.push(new XmlNode(`üîπ ${id}`, 'leaf', line));     // Th√™m node v√†o danh s√°ch
      }

      return items; // Tr·∫£ v·ªÅ danh s√°ch node <action>
    }

    return []; // Tr∆∞·ªùng h·ª£p kh√¥ng kh·ªõp g√¨ ‚Üí tr·∫£ v·ªÅ r·ªóng
  }
}

// ƒê·ªãnh nghƒ©a node XmlNode ƒë·ªÉ d√πng cho t·ª´ng ph·∫ßn t·ª≠ trong sitemap
class XmlNode extends vscode.TreeItem {
  constructor(
    public readonly label: string,                   // Label hi·ªÉn th·ªã trong c√¢y
    public readonly type: 'section' | 'leaf',        // Lo·∫°i node: section hay leaf
    public readonly line?: number                    // D√≤ng t∆∞∆°ng ·ª©ng (n·∫øu c√≥)
  ) {
    super(
      label,
      type === 'section'
        ? vscode.TreeItemCollapsibleState.Collapsed  // Section c√≥ th·ªÉ m·ªü r·ªông
        : vscode.TreeItemCollapsibleState.None       // Leaf l√† node cu·ªëi c√πng
    );

    // N·∫øu l√† leaf ‚Üí th√™m command ƒë·ªÉ nh·∫£y ƒë·∫øn d√≤ng khi click
    this.command =
      type === 'leaf' && typeof line === 'number'
        ? {
            title: 'Go to line',
            command: 'xmlSitemap.revealPosition',     // L·ªánh s·∫Ω ƒë∆∞·ª£c g·ªçi khi click
            arguments: [line]                         // Truy·ªÅn d√≤ng ƒë·ªÉ focus
          }
        : undefined;
  }
}
